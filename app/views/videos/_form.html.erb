<%= simple_form_for @video do |f| %>
    <%= render 'shared/errors', object: @video %>

    <div class="container-fluid" style="margin-top: 10px;">
      <div class = "col-sm-12">
      <% if !user_signed_in? %>
        <div class="text-center" style="color: red;">
          <h4><strong>ATTENTION - This is a guest session.</strong></h4>
          <h4><strong>You can use the application, but your video and notes will NOT be saved. If you want to save your items, please <a href="/users/login">sign in</a> or <a href="/users/sign_up">sign up</a></strong>.</h4>
        </div><br>
      <% end %>

        <!-- LEFT side-->
        <div class="col-sm-6">
          <div class="form-group" id="button">
          <%= f.text_field :link, id:'input_area', class: 'form-control', placeholder:"Paste YouTube Link Here", required: true %>
          </div>

          <button type="button" class="btn btn-primary" id="button_sbmt">Input Video</button>

          <!-- Puts the video into the IFrame -->
          <div id="iframe-div">
            <div id="info-text" style="width: 100%; height: 390px; border: 5px solid black; margin-top: 50px;">
              <br><br>
              <h3 style="text-align: center;">Paste Your Youtube Link To Start Taking Notes</h3>
              <br><br>
            </div>
          </div>

        <% if user_signed_in? %>
          <!-- Video Rating -->
          <div id="star-rating"><strong>Rate it!</strong> &nbsp;</div>
          <br><br>

          <!-- Video Review section -->
          <%= f.text_area :review, :cols=>"80",:rows=>"5", :placeholder=>"Write a Review" %>
        <% end %>
        </div>


        <!-- RIGHT SIDE -->
        <div id="right_side" class="col-sm-6">
          <%= f.text_area :note, :id=>"tinymce", :rows => "20", :cols => "80" %><br>
        <% if user_signed_in? %>
          <p><strong>Choose a Category</strong></p>
          <%= collection_select(:video, :subject_id, @users_subjects, :id, :subject, {:default=>true}, { :multiple => false}) %>
          <%= f.text_area :note_summary, :size => "80x10", :placeholder=>"Write a Summary/Description", id:"summary_area"%>
          <div>       
            <%= f.submit 'Save', class: 'btn btn-primary', :id=>'save_btn' %>
            <%= link_to 'See Videos', videos_path, class: 'btn btn-primary', :id=>"back" %>
          </div>
        <% end %>
        </div>
      </div>
    </div>
  <% end %>

  <script>

    // Prevent the Enter key from submitting the new video form
    // Instead it will load the video into the iframe
    function stopRKey(evt) { 
      var evt = (evt) ? evt : ((event) ? event : null); 
      var node = (evt.target) ? evt.target : ((evt.srcElement) ? evt.srcElement : null); 
      if ((evt.keyCode == 13) && (node.type=="text"))  {
        loadVideoIntoIframe(URL);
        return false;
      } 
    } 
    document.onkeypress = stopRKey; 

    // Get Star Rating Images
    $('#star-rating').raty({
      path: '/assets/',
      scoreName: 'video[rating]'
    });

    // Initialize TinyMCE editor
    tinyMCE.init({
      selector: "#tinymce",
      setup: function(editor) {
        // Editor is disable until video is loaded
        editor.on('init', function () {
          tinymce.activeEditor.getBody().setAttribute('contenteditable', false);
        });

        // Keeps track of when a keydown event is excecuted
        editor.on('keydown', function(args) {
          // pause only with letters
          if(args.keyCode > 65 && args.keyCode < 90){
            player.pauseVideo();
          } else if (args.keyCode == 13){
            player.playVideo();
            bool_val = true;
          }

          if (bool_val) {
            append_timestamp(player.getCurrentTime());
            bool_val = false;
          }
                      
          content = tinyMCE.activeEditor.getContent();

        });
      }
    });

    // Load video to Iframe when input button is submitted
    $("#button_sbmt").click(function () {
      loadVideoIntoIframe(URL);
    });

    // 0. Load video into iFrame
    function loadVideoIntoIframe(URL){
      URL = document.getElementById("input_area").value;

      // If video input field is empty or is not a youtube link, an error is given.
      if (URL == "" || URL.indexOf("youtube") === -1){
        $("#video-input-error").remove();
        $("#iframe-div").prepend('<div id="video-input-error"><br><br><h5 style="color:red;"><strong>^Please enter a youtube link^</strong></h5></div>');
      }
      else {
        $("#video-input-error").remove();
        console.log(URL);
        tinymce.activeEditor.getBody().setAttribute('contenteditable', true);
        $("#info-text").remove();
        $("#iframe-div").append('<div id="player"></div>');
        console.log(URL);
        parse_embeded_code(URL);
        get_embeded_code();
        youTubeIframeAPIReady();
      }
    }

    // 1. Parse youtube code
    function parse_embeded_code(URL) {
      embeded_url_code = URL.split("=").pop();
    }
    function get_embeded_code() {
        video_id = embeded_url_code;
    }

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);


    // 3. This function creates an <iframe> (and YouTube player)
    function youTubeIframeAPIReady() {
      console.log(video_id);
      player = new YT.Player('player', {
        height: '390',
        width: '640',
        videoId: video_id 
      });
    }

    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
      event.target.playVideo();
    }

    var URL;
    var embeded_url_code;
    var video_id;
    var player;
    var i = 0;
    var bool_val = false;
    var content;
    var summary_content;
    var review_content;
    var youtube_url;
    var save;

    function append_timestamp(time) {
      console.log(time);
      $('#timestamp').append("<p><a href='#' onclick=playerSeekTo(player," + time + ")>" + time.toFixed(2) + "</a></p>");
      var seconds = time.toFixed(0);
      console.log("Cut down time: " + seconds);

      tinyMCE.activeEditor.$("p").prepend
     ("<a href='#' class='timestamp_note'><strong>"+ time.toFixed(0) + "s</strong></a>: ");
    }
        
    function playerSeekTo(player, seconds) {
      player.seekTo(seconds);
    }


    // saving notes to local machine
    $('#create').click(function(){
      content = tinyMCE.activeEditor.getContent({format : 'text'});
      console.log(content); 
    });

    var textFile = null,
    makeTextFile = function (text) {
      var data = new Blob([content], {type: 'text/plain'});
      // If we are replacing a previously generated file we need to
      // manually revoke the object URL to avoid memory leaks.
      if (textFile !== null) {
        window.URL.revokeObjectURL(textFile);
      }
      textFile = window.URL.createObjectURL(data);
      return textFile;
    };

    var create = document.getElementById('create'),
    textbox = content;
    create.addEventListener('click', function () {
      var link = document.getElementById('downloadlink');
      link.href = makeTextFile(textbox);
      link.style.display = 'block';
    }, false);

  </script>